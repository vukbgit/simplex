{% block validationAssets %}
<script>
// bootstrap starter JavaScript for disabling form submissions if there are invalid fields
//mixed with validation tutorial from https://css-tricks.com/form-validation-part-2-constraint-validation-api-javascript/
(function() {
    'use strict';
    window.addEventListener('load', function() {
        // Fetch all the forms we want to apply custom Bootstrap validation styles to
        var forms = document.getElementsByClassName('needs-validation');
        for (var i = 0; i < forms.length; i++) {
            //add novalidate to skip browser native validation, do it by javascript so that in case of javascript error native validation still works
            forms[i].setAttribute('novalidate', true);
            // Get all of the form elements
            var fields = forms[i].elements;
            var field, attributeName, attributeCheck, validityState;
            //var regex = /'data-validity-state-([a-z\-]+)-invalid'/g;
            var regex = /data-validity-state-([a-z\-]+)-invalid/g;
            for (var i = 0; i < fields.length; i++) {
                field = fields[i];
                //if(fieldIsToValidate(field)) {
                    //search for a validity state already triggered at compile time
                    //var dataAttribute = 'data-validity-state-' + validityState + '-message';
                    //return field.attributes[dataAttribute] ? field.attributes[dataAttribute].value : defaultErrorMessage;
                    
                    for (var j = 0; j < field.attributes.length; j++) {
                        attributeName = field.attributes[j].name;
                        //attributeCheck = attributeName.match(regex);
                        attributeCheck = regex.exec(attributeName);
                        if(attributeCheck) {
                            validityState = attributeCheck[1];
                            showError(field, getFieldError(field, validityState));
                        }
                    }
                //}
            }
        }
        // Listen to all blur events
        document.addEventListener(
            'blur',
            function (event) {
                // Only run if the field is in a form to be validated on blur
                if (event.target.form && !event.target.form.classList.contains('needs-validation') || event.target.form.classList.contains('do-not-validate-on-blur')) return;
                // Validate the field
                var error = hasError(event.target);
                if(error) {
                    showError(event.target, error);
                    event.target.form.classList.add('was-validated');
                } else {
                    // Otherwise, remove any existing error message
                    removeError(event.target);
                    event.target.form.classList.remove('was-validated');
                }
            },
            true
        );
        // Check all fields on submit
        document.addEventListener(
            'submit',
            function (event) {
                // Only run on forms flagged for validation
                if (!event.target.classList.contains('needs-validation')) return;
                // Get all of the form elements
                var fields = event.target.elements;
                // Validate each field
                // Store the first field with an error to a variable so we can bring it into focus later
                var error, hasErrors;
                for (var i = 0; i < fields.length; i++) {
                    error = hasError(fields[i]);
                    if (error) {
                        showError(fields[i], error);
                        if (!hasErrors) {
                            hasErrors = fields[i];
                        }
                    } else {
                        removeError(fields[i]);
                    }
                }
                // If there are errrors, don't submit form and focus on first element with error
                if (hasErrors) {
                    event.preventDefault();
                    hasErrors.focus();
                }
                // Otherwise, let the form submit normally
                // You could also bolt in an Ajax form submit process here
            },
            false
        );
    },
    false);
    
    /**
    * Gets custom error message from the attribute named after data-validity-state-[validity-state]-message
    * where [validity-state] is a name of a state as found to https://www.w3.org/TR/html5/sec-forms.html#validitystate
    * with the uppercase letters substituted by hypen + correspondent lowercase letter
     **/
    var getFieldError = function (field, validityState) {
        var defaultErrorMessage;
        switch(validityState) {
            case 'value-missing':
                defaultErrorMessage = '{{ 'Please fill out this field.'|trans|escape('js') }}';
            break;
            case 'email':
                defaultErrorMessage = '{{' Please enter an email address'|trans|escape('js') }}.';
            break;
            case 'url':
                defaultErrorMessage = '{{ 'Please enter a URL.'|trans|escape('js') }}';
            break;
            case 'too-short':
                defaultErrorMessage = 'Please lengthen this text to ' + field.getAttribute('minLength') + ' characters or more. You are currently using ' + field.value.length + ' characters.';
            break;
            case 'too-long':
                defaultErrorMessage = 'Please short this text to no more than ' + field.getAttribute('maxLength') + ' characters. You are currently using ' + field.value.length + ' characters.';
            break;
            case 'bad-input':
                defaultErrorMessage = '{{ 'Please enter a number.'|trans|escape('js') }}';
            break;
            case 'step-mismatch':
                defaultErrorMessage = '{{ 'Please select a valid value.'|trans|escape('js') }}';
            break;
            case 'range-overflow':
                defaultErrorMessage = 'Please select a value that is no more than ' + field.getAttribute('max') + '.';
            break;
            case 'range-underflow':
                defaultErrorMessage = 'Please select a value that is no less than ' + field.getAttribute('min') + '.';
            break;
            case 'pattern-mismatch':
                defaultErrorMessage = '{{ 'Please match the requested format.'|trans|escape('js') }}';
            break;
        }
        var dataAttribute = 'data-validity-state-' + validityState + '-message';
        return field.attributes[dataAttribute] ? field.attributes[dataAttribute].value : defaultErrorMessage;
    }
    
    // Checks if a field is candidate to validation
    var fieldIsToValidate = function (field) {
        // Don't validate submits, buttons, file and reset inputs, and disabled fields
        return !(field.disabled || field.type === 'file' || field.type === 'reset' || field.type === 'submit' || field.type === 'button');
    }
    
    // Validates the field
    var hasError = function (field) {
        // Don't validate submits, buttons, file and reset inputs, and disabled fields
        if (!fieldIsToValidate(field)) return;
        // Get validity
        var validity = field.validity;
        // If valid, return null
        if (validity.valid) return;
        // If field is required and empty
        if (validity.valueMissing) return getFieldError(field, 'value-missing');
        // If not the right type
        if (validity.typeMismatch) {
            // Email
            if (field.type === 'email') return getFieldError(field, 'type-mismatch-email');
            // URL
            if (field.type === 'url') return getFieldError(field, 'type-mismatch-url');
        }
        // If too short
        if (validity.tooShort) return getFieldError(field, 'too-short');
        // If too long
        if (validity.tooLong) return getFieldError(field, 'too-short');
        // If number input isn't a number
        if (validity.badInput) return getFieldError(field, 'bad-input');
        // If a number value doesn't match the step interval
        if (validity.stepMismatch) return getFieldError(field, 'step-mismatch');
        // If a number field is over the max
        if (validity.rangeOverflow) return getFieldError(field, 'range-overflow');
        // If a number field is below the min
        if (validity.rangeUnderflow) return getFieldError(field, 'range-underflow');
        // If pattern doesn't match
        if (validity.patternMismatch) return getFieldError(field, 'pattern-mismatch');
        // If all else fails, return a generic catchall error
        return '{{ 'The value you entered for this field is invalid.'|trans|escape('js')  }}';
    };
    
    /*
    Shows error
    TODO: checkbox/radio
    */
    var showError = function (field, error) {
        // Toggle error classes to field
        field.classList.remove('is-valid');
        field.classList.add('is-invalid');
        // Get field id or name
        var id = field.id || field.name;
        if (!id) return;
        // Check if error message field already exists
        // If not, create one
        var message = field.form.querySelector('.invalid-tooltip#error-for-' + id );
        if (!message) {
            message = document.createElement('div');
            message.className = 'invalid-tooltip';
            message.id = 'error-for-' + id;
            field.parentNode.insertBefore( message, field.nextSibling );
        }
        // Add ARIA role to the field
        field.setAttribute('aria-describedby', 'error-for-' + id);
        // Update error message
        message.innerHTML = error;
        // Show error message
        //message.style.display = 'block';
        //message.style.visibility = 'visible';
    };
    
    /*
    Remove error
    TODO: checkbox/radio
    */
    var removeError = function (field) {
        // Toggle error classes to field
        field.classList.remove('is-invalid');
        field.classList.add('is-valid');
        // Remove ARIA role from the field
        field.removeAttribute('aria-describedby');
        // Get field id or name
        var id = field.id || field.name;
        if (!id) return;
        // Check if an error message is in the DOM
        var message = field.form.querySelector('.invalid-tooltip#error-for-' + id + '');
        if (!message) return;
    };
})();
</script>
{% endblock %}

{# rich text editor
language packages must be downloaded from https://www.tiny.cloud/get-tiny/language-packages/ and saved into /public/share/rich-text-editor/locales/ #}
{% block richTextEditorAssets %}
<!-- rich text textarea -->
<script src="{{ 'tinymce/tinymce.min.js'|pathToNpmAsset }}"></script>
<style type="text/css">
/*tinyMCE fullscreen*/
div.mce-fullscreen {
    z-index:10000;
}
</style>
{% endblock %}

{# file upload #}
{% block fileUploadAssets %}
<!-- Kartik Bootstrap file input -->
<link href="{{ 'bootstrap-fileinput/css/fileinput.min.css'|pathToNpmAsset }}" media="all" rel="stylesheet" type="text/css" />
<script src="{{ 'bootstrap-fileinput/js/plugins/piexif.min.js'|pathToNpmAsset }}" type="text/javascript"></script>
<script src="{{ 'bootstrap-fileinput/js/plugins/sortable.min.js'|pathToNpmAsset }}" type="text/javascript"></script>
<script src="{{ 'bootstrap-fileinput/js/fileinput.min.js'|pathToNpmAsset }}" type="text/javascript"></script>
<script src="/public/share/simplex/Erp/js/upload-file-theme.js" type="text/javascript"></script>
<script src="{{ 'bootstrap-fileinput/js/locales/%s.js'|format(attribute(language, 'ISO-639-1'))|pathToNpmAsset }}" type="text/javascript"></script>
{% endblock %}
