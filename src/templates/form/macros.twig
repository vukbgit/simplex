{###################
# TEXT-LIKE INPUTS #
###################}

{# displays an input field given the type, useful when type is condition dependant
@param string type: text | email
@param hash config: hash for field properties (see fieldSetAttributes macro explanation)
#}
{% macro displayInput(type, config) %}
    {% import _self as selfMacros %}
    {% set config = parseFieldConfig(config) %}
    <input 
    type="{{ type }}"
    {{ selfMacros.fieldSetAttributes(config) }}
    >
{% endmacro %}

{# displays a text-like input field given the type, useful when type is condition dependant
@param string type: text | email | password
@param hash config: hash for field properties (see fieldSetAttributes macro explanation)
#}
{% macro displayInputByTipe(type, config) %}
    {% import _self as selfMacros %}
    {% if type == 'text' %}
        {{ selfMacros.displayInputText(config) }}
    {% elseif type == 'email' %}
        {{ selfMacros.displayInputEmail(config) }}
    {% elseif type == 'password' %}
        {{ selfMacros.displayInputPassword(config) }}
    {% endif %}
{% endmacro %}

{# displays an input hidden field
@param hash config: hash for field properties (see fieldSetAttributes macro explanation)
#}
{% macro displayInputHidden(config) %}
    {% import _self as selfMacros %}
    {{ selfMacros.displayInput('hidden', config) }}
{% endmacro %}

{# displays an input text field
@param hash config: hash for field properties (see fieldSetAttributes macro explanation)
#}
{% macro displayInputText(config) %}
    {% import _self as selfMacros %}
    {# add input class #}
    {% set classes = config.classes ?? [] %}
    {% set classes = ['form-control']|merge(classes) %}
    {% set config = updateProperty(config, 'classes', classes) %}
    {{ selfMacros.displayInput('text', config) }}
{% endmacro %}

{# displays an input email field
@param hash config: hash for field properties (see fieldSetAttributes macro explanation)
NOTE: for to perform validation Simplex does not use browser built in (see https://www.w3.org/TR/html5/sec-forms.html#constraints-definitions) but a pattern that matches real world emails; and to avoid conflicts does not use both email type AND pattern validation
^(([^<>()\\.,;:\s@"]+(\.[^<>()\\.,;:\s@"]+)*)|(".+"))@(([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$

#}
{% macro displayInputEmail(config) %}
    {% import _self as selfMacros %}
    {# set default validation pattern #}
    {% if config.validation.pattern is not defined %}
    {% set validation = config.validation ?? {} %}
        {% set validation = updateProperty(validation, 'pattern', '^(([^<>()\\.,;:\s@"]+(\.[^<>()\\.,;:\s@"]+)*)|(".+"))@(([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$') %}
        {% set config = updateProperty(config, 'validation', validation) %}
    {% endif %}
    {# add input class #}
    {% set classes = config.classes ?? [] %}
    {% set classes = ['form-control']|merge(classes) %}
    {% set config = updateProperty(config, 'classes', classes) %}
    {{ selfMacros.displayInput('text', config) }}
{% endmacro %}

{# displays an input password field
@param hash config: hash for field properties (see fieldSetAttributes macro explanation)
#}
{% macro displayInputPassword(config) %}
    {% import _self as selfMacros %}
    {# add input class #}
    {% set classes = config.classes ?? [] %}
    {% set classes = ['form-control']|merge(classes) %}
    {% set config = updateProperty(config, 'classes', classes) %}
    {{ selfMacros.displayInput('password', config) }}
{% endmacro %}

{# displays a file input field
@param hash config: hash for field properties (see fieldSetAttributes macro explanation)
#}
{% macro displayInputFile(config) %}
    {% import _self as selfMacros %}
    {{ selfMacros.displayInput('file', config) }}
{% endmacro %}

{# displays a text-like input field block
@param string type: text | email | password
@param hash config: hash for field properties (see fieldSetAttributes macro explanation)
#}
{% macro displayInputGroup(type, config) %}
    {% import _self as selfMacros %}
    {% set inputId = (config.id ?? config.name)|formatIdforJs %}
    <div class="form-group" id="{{ '%s-container'|format(inputId) }}">
    {% if config.locales is not defined %}
        {{ selfMacros.displayLabel(config) }}
        {{ selfMacros.displayInputByTipe(type, config) }}
    {% else %}
        {% for languageCode, language in config.locales|objectToArray %}
            {% set languageConfig = config %}
            {% set languageConfig = updateProperty(languageConfig, 'name', '%s[%s]'|format(config.name, languageCode)) %}
            {% set languageConfig = updateProperty(languageConfig, 'countryCode', attribute(language, 'ISO-3166-1-2')|lower) %}
            {{ selfMacros.displayLabel(languageConfig) }}
            {{ selfMacros.displayInputByTipe(type, languageConfig) }}
        {% endfor %}
    {% endif %}
        {{ selfMacros.displayHelp(config) }}
    </div>
{% endmacro %}

{#################
# RADIO/CHECKBOX #
#################}

{# displays one or more radio input field
@param hash config: hash for field properties (see fieldSetAttributes macro explanation) plus specific properties:
    bool inline
@param array items: array of hashes each with value and label property
#}
{% macro displayInputRadio(config, items) %}
    {% import _self as selfMacros %}
    {{ selfMacros.displayInputRadioCheckbox('radio', config, items) }}
{% endmacro %}

{# displays one or more checkbox input field
@param hash config: hash for field properties (see fieldSetAttributes macro explanation) plus specific properties:
    bool inline
@param array items: array of hashes each with value and label property
#}
{% macro displayInputRadio(config, items) %}
    {% import _self as selfMacros %}
    {{ selfMacros.displayInputRadioCheckbox('checkbox', config, items) }}
{% endmacro %}

{# displays one or more radio/checkbox input field
@param string type: radio | checkbox
@param hash config: hash for field properties (see fieldSetAttributes macro explanation) plus specific properties:
    bool inline
@param array items: array of hashes each with value and label property
#}
{% macro displayInputRadioCheckbox(type, config, items) %}
    {% import _self as selfMacros %}
    <div>
    {% for item in items %}
         {% set itemConfig = config %}
<div class="form-check{% if config.inline %} form-check-inline{% endif %}">
        {# id #}
        {% set itemId = '%s_%s'|format(config.name, item.value) %}
        {% set itemConfig = updateProperty(itemConfig, 'id', itemId) %}
        {# checked #}
        {% set itemConfig = updateProperty(itemConfig, 'checked', item.value == config.value) %}
        {# value #}
        {% set itemConfig = updateProperty(itemConfig, 'value', item.value) %}
        {# class #}
        {% set classes = config.classes ?? [] %}
        {% set classes = ['form-check-input']|merge(classes) %}
        {% set itemConfig = updateProperty(itemConfig, 'classes', classes) %}
        {{ selfMacros.displayInput(type, itemConfig) }}
        {{ selfMacros.displayLabel({
            'id': itemId,
            'label': item.label
        },
        'form-check-label') }}
    </div>
    {% endfor %}
    </div>
{% endmacro %}

{# displays a radios fields block
@param hash config: hash for field properties (see fieldSetAttributes macro explanation)
@param array items: array of hashes each with value and label property
#}
{% macro displayInputRadioGroup(config, items) %}
    {% import _self as selfMacros %}
    {{ selfMacros.displayInputRadioCheckboxGroup('radio', config, items) }}
{% endmacro %}

{# displays a checkoxes fields block
@param hash config: hash for field properties (see fieldSetAttributes macro explanation)
@param array items: array of hashes each with value and label property
#}
{% macro displayInputCheckboxGroup(config, items) %}
    {% import _self as selfMacros %}
    {{ selfMacros.displayInputRadioCheckboxGroup('checkbox', config, items) }}
{% endmacro %}

{# displays a checkoxes fields block
@param string type: radio | checkbox
@param hash config: hash for field properties (see fieldSetAttributes macro explanation)
@param array items: array of hashes each with value and label property
#}
{% macro displayInputRadioCheckboxGroup(type, config, items) %}
    {% import _self as selfMacros %}
    <div class="form-group" id="{{ '%s-container'|format(config.name|formatIdforJs) }}">
        {{ selfMacros.displayLabel(config) }}
        {{ selfMacros.displayInputRadioCheckbox(type, config, items) }}
        {{ selfMacros.displayHelp(config) }}
    </div>
{% endmacro %}

{###########
# TEXTAREA #
###########}

{# displays a textarea field
@param hash config: hash for field properties (see fieldSetAttributes macro explanation)
#}
{% macro displayTextarea(config) %}
    {% import _self as selfMacros %}
    {% set config = parseFieldConfig(config) %}
    {% set value = config.value %}
    {% set config = deleteProperty(config, 'value') %}
    <textarea
    {{ selfMacros.fieldSetAttributes(config) }}
    >{{ value }}</textarea>
{% endmacro %}

{# rich text field
language packages must be downloaded from https://www.tiny.cloud/get-tiny/language-packages/ and saved into /public/share/rich-text-editor/locales/
@param hash context: the calling template context object
@param hash config: hash for field properties (see fieldSetAttributes macro explanation) excpet for specific rich text options which can be set as a config.options hash
#}
{% macro displayRichTextEditor(context, config) %}
    {% import _self as selfMacros %}
    {# check locale file path #}
    {% set languageCode = attribute(context.language, 'ISO-639-1') %}
    {% set localePath = '/public/share/rich-text-editor/locales/%s.js'|format(languageCode) %}
    {% if isFile(localePath) == false %}
        {% set config = updateProperty(config, 'validation', updateProperty(config.validation, 'invalidMessage', 'TinyMCE local file missing in %s'|format(localePath))) %}
        {% set loadLocale = false %}
    {% else %}
        {% set loadLocale = true %}
    {% endif %}
    {# format id to be used by javascript #}
    {% set config = updateProperty(config, 'id', (config.id ?? config.name)|formatIdforJs) %}
    <div class="form-group">
        {{ selfMacros.displayLabel(config) }}
        {{ selfMacros.displayTextarea(config) }}
        {{ selfMacros.displayHelp(config) }}
    </div>
    <script type="text/javascript">
        var options = {
            selector: '#{{ config.id }}',
    {% if loadLocale %}
            language: '{{ languageCode }}',
            language_url: '{{ localePath }}',
    {% endif %}
    {# rich text editor specific options #}
    {% for option,value in config.options %}
        '{{ option }}': {{ value|varToJs }},
    {% endfor %}
        }
        tinymce.init(options);
    </script>
{% endmacro %}

{#########
# UPLOAD #
#########}

{# file(s) upload field
@param hash context: the calling template context object
@param string uploadRoute: route to address uploads to
@param hash config: hash for field properties (see fieldSetAttributes macro explanation) excpet for specific upload file options which can be set as a config.options hash; common options:
    allowedFileTypes: ['image', 'html', 'text', 'video', 'audio', 'flash', 'object']
    maxFileCount: maximum number of files allowed for each multiple upload. If set to 0, it means number of files allowed is unlimited
#}
{% macro displayFileUpload(context, uploadRoute, config) %}
    {% import _self as selfMacros %}
    {# build uplaod route #}
    <div class="form-group">
        {{ selfMacros.displayLabel(config) }}
        {% set inputId = (config.id ?? config.name)|formatIdforJs %}
        {{ selfMacros.displayInputHidden(config) }}
        {# format upload input id to be used by javascript #}
        {% set uploadId = '%s-upload'|format(inputId) %}
        {% set config = updateProperty(config, 'name', uploadId) %}
        {% set config = updateProperty(config, 'id', uploadId) %}
        {{ selfMacros.displayInputFile(config) }}
        {# set help infos #}
        {% set help = config.help ? [config.help] : [] %}
        {# maximum file size #}
        {% set help = help|merge(['maximum allowed upload size: %s MB'|trans|format(context.uploadMaxFilesizeMB)]) %}
        {# number of files #}
        {% set help = help|merge(['maximum number of files: %s'|trans|format(config.options.maxFileCount ? config.options.maxFileCount : 'no limit'|trans)]) %}
        {% set config = updateProperty(config, 'help', help) %}
        {{ selfMacros.displayHelp(config) }}
    </div>
    
    <script type="text/javascript">
    var options = {
        language: '{{ attribute(context.language, 'ISO-639-1') }}',
        theme: 'simplex',
        showUpload: false,
        showRemove: false,
        showUploadStats: false,
        showDrag: true,
        browseOnZoneClick: true,
        maxFileSize: {{ context.uploadMaxFilesizeKB }},
        uploadUrl: '{{ uploadRoute }}',
    {# config tweaks #}
    {% if config.options.maxFileCount and config.options.maxFileCount == 1 and config.options.autoReplace is not defined %}
        {% set config = updateProperty(config, 'options', updateProperty(config.options, 'autoReplace', true)) %}
    {% endif %}
    {% for option,value in config.options %}
        '{{ option }}': {{ value|varToJs }},
    {% endfor %}
    };
    $("#{{ uploadId }}").fileinput(options)
    //auto upload on file selection
    .on("fileselect", function(event, numFiles, label) {
        //upload only if there are files to upload so that triggered errors can be shown
        if( $('#{{ uploadId }}').fileinput('getFilesCount')) {
            $("#{{ uploadId }}").fileinput("upload");
        }
    })
    //after upload append file to input value
    .on('fileuploaded', function(event, data, previewId, index) {
        //get file name
        var fileName = data.files[0].name;
        upload.appendFile('{{ inputId }}', {name: fileName});
    })
    .on('fileclear', function(event, id, index) {
        console.log('fileclear: id = ' + id + ', index = ' + index);
    })
    .on('filecleared', function(event, id, index) {
        console.log('filecleared: id = ' + id + ', index = ' + index);
    })
    .on('fileremoved', function(event, id, index) {
        console.log('fileremoved: id = ' + id + ', index = ' + index);
    })
    //preview of just uploaded file has been deleted
    .on('filesuccessremove', function(event, id, index) {
        //remove file form input value
        upload.removeFileFromInput('{{ inputId }}', index);
    })
    ;
    var upload = {
        /**
        * gets files list from hidden input json
        * @param string inputId: id attribute of the hidden input that stores files rapresentation
        **/
        getInputFiles: function(inputId) {
            return $('#' + inputId).val() ? JSON.parse($('#' + inputId).val()) : [];
        },
        /**
        * sets files list into hidden input json
        * @param string inputId: id attribute of the hidden input that stores files rapresentation
        * @param array filesList: list of files objects
        **/
        setFiles: function(inputId, filesList) {
            $('#' + inputId).val(JSON.stringify(filesList));
        },
        /**
        * makes room for a new file
        * @param string inputId: id attribute of the hidden input that stores files rapresentation
        **/
        makeRoom: function(inputId) {
            //get current files list
            var filesList = this.getInputFiles(inputId);
            //check maxFileCount
            var maxFileCount = options.maxFileCount ? options.maxFileCount : 0;
            if(maxFileCount == filesList.length) {
                //remove first file in the list to make room
                this.removeFileFromInput(inputId, 0);
                this.removeFileFromPreviews(0);
            }
        },
        /**
        * removes a file from the input value
        * @param string inputId: id attribute of the hidden input that stores files rapresentation
        * @param int fileIndex: 0 based index of file both in the input files list and the files previews of uploaded files
        **/
        removeFileFromInput: function(inputId, fileIndex) {
            //get current files list
            var filesList = this.getInputFiles(inputId);
            filesList.splice(fileIndex,1);
            this.setFiles(inputId, filesList);
        },
        /**
        * removes a file from previews
        * @param int fileIndex: 0 based index of file both in the input files list and the files previews of uploaded files
        **/
        removeFileFromPreviews: function(fileIndex) {
            //remove file from preview
            //get previews of successfully upload files
            var previewsList = $('#{{ uploadId }}').fileinput('getFrames', '.file-preview-success');
            var preview = previewsList[fileIndex];
            $(preview).remove();
        },
        /**
        * appends an uploaded file to files list into the hidden input
        * @param string inputId: id attribute of the hidden input that stores files rapresentation
        * @param object fileObject: the object representing the uploaded file {name:name-of-the-file}
        **/
        appendFile: function(inputId, fileObject) {
            //make room if necessary
            this.makeRoom(inputId);
            //append file
            var filesList = this.getInputFiles(inputId);
            filesList.push(fileObject);
            this.setFiles(inputId, filesList);
        }
    }
    </script>
{% endmacro %}

{##########
# CAPTCHA #
##########}

{# captcha
NOTE: controller class must inject a Simplex\ZendCaptchaImageExtended instance
@param object captchaImage: as generated by Simplex\ZendCaptchaImageExtended::generateCaptchaImage()
#}
{% macro displayCaptcha(captchaImage) %}
    {% import _self as selfMacros %}
<div class="form-row form-group" id="captcha-container">
    <div class="col-12">
        <label for="captcha">{% trans 'Control Code' %}</label>
        <i class="icon-form-reload" id="captcha-icon-reload"></i>
    </div>
    <div class="col-6">
        <img src="{{ captchaImage.imageUrl }}" id="captcha-image">
        <input type="hidden" name="captcha_id" id="captcha_id" value="{{ captchaImage.id }}">
    </div>
    <div class="col-6">
        {{ selfMacros.displayInputText({
            'name': 'captcha',
            'validation': {
                'required': true
            }
        }) }}
    </div>
    <div class="col-12">
        <small class="form-text text-muted">
            {% trans "Type code displayed into image, if you are not able to read the code click on the reload icon to generate a new image" %}
        </small>
    </div>
</div>
{% endmacro %}

{#################
# FIELD BUILDING #
#################}
{# sets field attributes based on config
for autocomplete see https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete
@param hash config: hash with following properties
{
    'name': '',
    'id': '',
    'value': '',
    'label': fieldsLabels.,
    'help': fieldsLabels.,
    'autofocus': true,
    'autocomplete': '',
    'maxlength': '',
    'classes': '',
    'validation': {
        'required': true,
        'pattern': ''
    }
}
#}
{% macro fieldSetAttributes(config) %}
    {% set validation = config.validation ?? {} %}
    {# common #}
    name="{{ config.name }}"
    id="{{ (config.id ?? config.name)|formatIdforJs }}"
    value="{{ config.value|escape('html_attr') }}"
    {% if config.label %}
    placeholder="{{ config.label }}"
    {% endif %}
    {% if config.autofocus %}
    autofocus="" 
    {% endif %}
    {% if config.disabled %}
    disabled="" 
    {% endif %}
    {% if config.checked %}
    checked="" 
    {% endif %}
    {% if config.maxlength %}
    maxlength="{{ config.maxlength }}" 
    {% endif %}
    {% if config.autocomplete %}
    autocomplete="{{ config.autocomplete }}" 
    {% endif %}
    {# merge classes #}
    class="{{ config.classes|join(' ') }}"
    {# help text #}
    {% if config.help %}
    aria-describedby="{{ '%s-help'|format(config.id ?? config.name ) }}"
    {% endif %}
    {# validation #}
    {% if validation %}
        {% if validation.required %}
        required="" 
        {% endif %}
        {% if validation.pattern %}
        pattern="{{ validation.pattern|escape('html_attr') }}" 
        {% endif %}
        {% if validation.validityStates %}
            {% for validityState, validityStateProperties in validation.validityStates %}
                {% if validityStateProperties.invalid %}
                    {{ 'data-validity-state-%s-invalid="true"'|format(validityState) }}
                {% endif %}
                {% if validityStateProperties.message %}
                    {{ 'data-validity-state-%s-message=%s'|format(validityState, validityStateProperties.message|escape('html_attr')) }}
                {% endif %}
            {% endfor %}
        {% endif %}
    {% endif %}
{% endmacro %}

{# displays a field validation message
NOTE: javascript validation function creates automatically if needed, this macro can be used to initialized message at page load time
@param string type: text | email
@param hash config: hash for field properties (see fieldSetAttributes macro explanation)
#}
{% macro displayFieldValidationMessage(validation) %}
    {% if validation.invalidMessage %}
<div class="invalid-tooltip">
  {{ validation.invalidMessage }}
</div>
    {% endif %}
{% endmacro %}

{# displays label
@param hash config: hash for field properties (see fieldSetAttributes macro explanation)
@param string classes: optional label css classes
#}
{% macro displayLabel(config, classes) %}
<label for="{{ (config.id ?? config.name)|formatIdforJs }}"{% if classes %} class="{{ classes }}"{% endif %}
>
{{ config.label|raw }}
{% if config.countryCode is defined %}
<span class="{{ 'flag-icon flag-icon-%s'|format(config.countryCode) }}"></span>
{% endif %}
</label>
{% endmacro %}

{# displays help
@param hash config: hash for field properties (see fieldSetAttributes macro explanation)
#}
{% macro displayHelp(config) %}
    {% if config.hideHelp is not defined or config.hideHelp == false %}
        {% set help = config.help ? (config.help is iterable ? config.help : [config.help]) : [] %}
        {% if config.maxlength %}
            {% set help = help|merge(['maximum length %s characters'|trans|format(config.maxlength)]) %}
        {% endif %}
        {% if help is not empty %}
    <small id="{{ '%s-help'|format(config.id ?? config.name ) }}" class="form-text text-muted">{{ help|join('; ') }}</small>
        {% endif %}
    {% endif %}
{% endmacro %}

{##################
# ASSETS & SET-UP #
##################}

{# sets up form and include assets, to be called inside head tag
@param hash config: hash for form properties
    noValidation (bool): whether NOT to load JavaScript validation API
    locales (bool): whether there is at least one localized field
    assets (list): ['richTextEditor', 'fileUpload', 'captcha'] list of the field types included into form that need some asset to be included
    captcha (object): captcha config object, properties:
        reloadRoute (string): route for image reloading, it must be mapped and must return Simplex\ZendCaptchaImageExtended::reloadCaptcha
#}
{% macro setUpForm(context, config) %}
    {% import _self as selfMacros %}
    <!-- Fontello form icons -->
    <link rel="stylesheet" href="/public/share/simplex/form/Fontello/css/fontello.css">
    {# validation #}
    {% if (config.noValidation is not defined) or config.noValidation == false %}
        {{ selfMacros.formValidation() }}
    {% endif %}
    {# locales #}
    {% if config.locales %}
        {{ selfMacros.localesAssets(context) }}
    {% endif %}
    {# assets #}
    {% if 'richTextEditor' in config.assets %}
        {{ selfMacros.richTextEditorAssets(context) }}
    {% endif %}
    {% if 'fileUpload' in config.assets %}
        {{ selfMacros.fileUploadAssets(context) }}
    {% endif %}
    {% if 'captcha' in config.assets %}
        {{ selfMacros.captchaAssets(context, config.captcha) }}
    {% endif %}
{% endmacro %}

{#
builds validation javascript API
#}
{% macro formValidation() %}
<script>
/*************
* VALIDATION *
*************/
// bootstrap starter JavaScript for disabling form submissions if there are invalid fields
//mixed with validation tutorial from https://css-tricks.com/form-validation-part-2-constraint-validation-api-javascript/
(function() {
    'use strict';
    window.addEventListener('load', function() {
        // Fetch all the forms we want to apply custom Bootstrap validation styles to
        var forms = document.getElementsByClassName('needs-validation');
        for (var i = 0; i < forms.length; i++) {
            //add novalidate to skip browser native validation, do it by javascript so that in case of javascript error native validation still works
            forms[i].setAttribute('novalidate', true);
            // Get all of the form elements
            var fields = forms[i].elements;
            var field, attributeName, attributeCheck, validityState;
            //var regex = /'data-validity-state-([a-z\-]+)-invalid'/g;
            var regex = /data-validity-state-([a-z\-]+)-invalid/g;
            for (var i = 0; i < fields.length; i++) {
                field = fields[i];
                //if(fieldIsToValidate(field)) {
                    //search for a validity state already triggered at compile time
                    //var dataAttribute = 'data-validity-state-' + validityState + '-message';
                    //return field.attributes[dataAttribute] ? field.attributes[dataAttribute].value : defaultErrorMessage;
                    
                    for (var j = 0; j < field.attributes.length; j++) {
                        attributeName = field.attributes[j].name;
                        //attributeCheck = attributeName.match(regex);
                        attributeCheck = regex.exec(attributeName);
                        if(attributeCheck) {
                            validityState = attributeCheck[1];
                            showError(field, getFieldError(field, validityState));
                        }
                    }
                //}
            }
        }
        // Listen to all blur events
        document.addEventListener(
            'blur',
            function (event) {
                // Only run if the element is a form field (and not a dropzone for example) and is the form needs to be validated
                if (typeof event.target.form == 'undefined' || (!event.target.form.classList.contains('needs-validation') || event.target.form.classList.contains('do-not-validate-on-blur'))) return;
                // Validate the field
                var error = hasError(event.target);
                if(error) {
                    showError(event.target, error);
                    event.target.form.classList.add('was-validated');
                } else {
                    // Otherwise, remove any existing error message
                    removeError(event.target);
                    event.target.form.classList.remove('was-validated');
                }
            },
            true
        );
        // Check all fields on submit
        document.addEventListener(
            'submit',
            function (event) {
                // Only run on forms flagged for validation
                if (!event.target.classList.contains('needs-validation')) return;
                // Get all of the form elements
                var fields = event.target.elements;
                // Validate each field
                // Store the first field with an error to a variable so we can bring it into focus later
                var error, hasErrors;
                for (var i = 0; i < fields.length; i++) {
                    error = hasError(fields[i]);
                    if (error) {
                        showError(fields[i], error);
                        if (!hasErrors) {
                            hasErrors = fields[i];
                        }
                    } else {
                        removeError(fields[i]);
                    }
                }
                // If there are errrors, don't submit form and focus on first element with error
                if (hasErrors) {
                    event.preventDefault();
                    hasErrors.focus();
                }
                // Otherwise, let the form submit normally
                // You could also bolt in an Ajax form submit process here
            },
            false
        );
    },
    false);
    
    /**
    * Gets custom error message from the attribute named after data-validity-state-[validity-state]-message
    * where [validity-state] is a name of a state as found to https://www.w3.org/TR/html5/sec-forms.html#validitystate
    * with the uppercase letters substituted by hypen + correspondent lowercase letter
     **/
    var getFieldError = function (field, validityState) {
        var defaultErrorMessage;
        switch(validityState) {
            case 'value-missing':
                defaultErrorMessage = '{{ 'Please fill out this field'|trans|escape('js') }}';
            break;
            case 'email':
                defaultErrorMessage = '{{'Please enter an email address'|trans|escape('js') }}.';
            break;
            case 'url':
                defaultErrorMessage = '{{ 'Please enter a URL'|trans|escape('js') }}';
            break;
            case 'too-short':
                defaultErrorMessage = '{{ 'Please lengthen this text to %s characters or more. You are currently using %s characters'|trans|format("' + field.getAttribute('minLength') + '", "' + field.value.length + '")|raw }}';
            break;
            case 'too-long':
                defaultErrorMessage = '{{ 'Please short this text to no more than %s characters. You are currently using %s characters'|trans|format("' + field.getAttribute('maxLength') + '", "' + field.value.length + '")|raw }}';
            break;
            case 'bad-input':
                defaultErrorMessage = '{{ 'Please enter a number'|trans|escape('js') }}';
            break;
            case 'step-mismatch':
                defaultErrorMessage = '{{ 'Please select a valid value'|trans|escape('js') }}';
            break;
            case 'range-overflow':
                defaultErrorMessage = '{{ 'Please select a value that is no more than %s'|trans|format("' + field.getAttribute('max')")|raw }};
            break;
            case 'range-underflow':
                defaultErrorMessage = '{{ 'Please select a value that is no less than %s'|trans|format("' + field.getAttribute('min')")|raw }};
            break;
            case 'pattern-mismatch':
                defaultErrorMessage = '{{ 'Please match the requested format'|trans|raw }}';
            break;
        }
        var dataAttribute = 'data-validity-state-' + validityState + '-message';
        return field.attributes[dataAttribute] ? field.attributes[dataAttribute].value : defaultErrorMessage;
    }
    
    // Checks if a field is candidate to validation
    var fieldIsToValidate = function (field) {
        // Don't validate submits, buttons, file and reset inputs, and disabled fields
        return !(field.disabled || field.type === 'file' || field.type === 'reset' || field.type === 'submit' || field.type === 'button');
    }
    
    // Validates the field
    var hasError = function (field) {
        // Don't validate submits, buttons, file and reset inputs, and disabled fields
        if (!fieldIsToValidate(field)) return;
        // Get validity
        var validity = field.validity;
        // If valid, return null
        if (validity.valid) return;
        // If field is required and empty
        if (validity.valueMissing) return getFieldError(field, 'value-missing');
        // If not the right type
        if (validity.typeMismatch) {
            // Email
            if (field.type === 'email') return getFieldError(field, 'type-mismatch-email');
            // URL
            if (field.type === 'url') return getFieldError(field, 'type-mismatch-url');
        }
        // If too short
        if (validity.tooShort) return getFieldError(field, 'too-short');
        // If too long
        if (validity.tooLong) return getFieldError(field, 'too-short');
        // If number input isn't a number
        if (validity.badInput) return getFieldError(field, 'bad-input');
        // If a number value doesn't match the step interval
        if (validity.stepMismatch) return getFieldError(field, 'step-mismatch');
        // If a number field is over the max
        if (validity.rangeOverflow) return getFieldError(field, 'range-overflow');
        // If a number field is below the min
        if (validity.rangeUnderflow) return getFieldError(field, 'range-underflow');
        // If pattern doesn't match
        if (validity.patternMismatch) return getFieldError(field, 'pattern-mismatch');
        // If all else fails, return a generic catchall error
        return '{{ 'The value you entered for this field is invalid.'|trans|escape('js')  }}';
    };
    
    /*
    Shows error
    */
    var showError = function (field, error) {
        // Toggle error classes to field
        field.classList.remove('is-valid');
        field.classList.add('is-invalid');
        //get field type
        var fieldType = $(field).attr('type');
        // Get field id or name
        var id, messageContainer, manuallyShowMessage;
        switch(fieldType) {
            case 'radio':
            case 'checkbox':
                //radio or checkbox input id contains also value, check on name (and therefore on group container)
                id = field.name;
                manuallyShowMessage = true;
            break;
            default:
                id = field.id || field.name;
                manuallyShowMessage = false;
            break;
        }
        if (!id) return;
        messageContainer = $('#' + id + '-container');
        if(!messageContainer.length) {
            messageContainer = $(field).parent();
        }
        // Check if error message field already exists
        // If not, create one
        var message = field.form.querySelector('.invalid-tooltip#error-for-' + id );
        if (!message) {
            message = document.createElement('div');
            message.className = 'invalid-tooltip';
            message.id = 'error-for-' + id;
            messageContainer.append( message, field.nextSibling );
        }
        // Add ARIA role to the field
        field.setAttribute('aria-describedby', 'error-for-' + id);
        // Update error message
        message.innerHTML = error;
        //show manually if necessary
        if(manuallyShowMessage) {
            $('#' + message.id).css('display', 'block');
        }
    };
    
    /*
    Remove error
    */
    var removeError = function (field) {
        // Toggle error classes to field
        field.classList.remove('is-invalid');
        field.classList.add('is-valid');
        //get field type
        var fieldType = $(field).attr('type');
        var messageId, manuallyHideMessage
        switch(fieldType) {
            case 'radio':
            case 'checkbox':
                messageId = 'error-for-' + field.name;
                manuallyHideMessage = true;
            break;
            default:
                manuallyHideMessage = false;
            break;
        }
        //hide manually if necessary
        if(manuallyHideMessage) {
            $('#' + messageId).css('display', 'none');
        }
        // Remove ARIA role from the field
        field.removeAttribute('aria-describedby');
        // Get field id or name
        var id = field.id || field.name;
        if (!id) return;
        // Check if an error message is in the DOM
        var message = field.form.querySelector('.invalid-tooltip#error-for-' + id + '');
        if (!message) return;
    };
})();
</script>
{% endmacro %}

{# localized fields
@param object context
#}
{% macro localesAssets(context) %}
{<!-- Flag icon css -->
<link href="{{ 'flag-icon-css/css/flag-icon.min.css'|pathToNpmAsset }}" media="all" rel="stylesheet" type="text/css" />
{% endmacro %}

{# rich text editor
language packages must be downloaded from https://www.tiny.cloud/get-tiny/language-packages/ and saved into /public/share/rich-text-editor/locales/
@param object context
#}
{% macro richTextEditorAssets(context) %}
<!-- rich text textarea -->
<script src="{{ 'tinymce/tinymce.min.js'|pathToNpmAsset }}"></script>
<style type="text/css">
/*tinyMCE fullscreen*/
div.mce-fullscreen {
    z-index:10000;
}
</style>
{% endmacro %}

{# file upload 
@param object context
#}
{% macro fileUploadAssets(context) %}
{<!-- Kartik Bootstrap file input -->
<link href="{{ 'bootstrap-fileinput/css/fileinput.min.css'|pathToNpmAsset }}" media="all" rel="stylesheet" type="text/css" />
<script src="{{ 'bootstrap-fileinput/js/plugins/piexif.min.js'|pathToNpmAsset }}" type="text/javascript"></script>
<script src="{{ 'bootstrap-fileinput/js/plugins/sortable.min.js'|pathToNpmAsset }}" type="text/javascript"></script>
<script src="{{ 'bootstrap-fileinput/js/fileinput.min.js'|pathToNpmAsset }}" type="text/javascript"></script>
<script src="/public/share/simplex/form/js/upload-file-theme.js" type="text/javascript"></script>
<script src="{{ 'bootstrap-fileinput/js/locales/%s.js'|format(attribute(context.language, 'ISO-639-1'))|pathToNpmAsset }}" type="text/javascript"></script>
{% endmacro %}

{# captcha 
@param object context
@param object config: captcha config object, properties:
    reloadRoute (string): route for image reloading
#}
{% macro captchaAssets(context, config) %}
<script type="text/javascript">
$(document).ready(function(){
    {% if config.reloadRoute is not defined %}
    alert('captcha field needs reloadRoute configuration');
    {% endif %}
    $('#captcha-icon-reload').click(function(){
        $.getJSON('{{ config.reloadRoute }}', function(captchaImage) {
            $('#captcha-image').attr('src', captchaImage.imageUrl);
            $('#captcha_id').val(captchaImage.id);
        });
    });
});
</script>
{% endmacro %}
