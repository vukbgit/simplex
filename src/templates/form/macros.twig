{# sets field attributes based on config
@param hash config: hash with following properties
{
    'name': '',
    'id': '',
    'value': '',
    'label': fieldsLabels.,
    'help': fieldsLabels.,
    'autofocus': true,
    'autocomplete': '',
    'maxlength': '',
    'class': '',
    'validation': {
        'required': true,
        'pattern': ''
    }
}
#}
{% macro fieldSetAttributes(config) %}
    {% set validation = config.validation ?? {} %}
    {# common #}
    name="{{ config.name }}"
    id="{{ config.id ?? config.name }}"
    {% if config.value %}
    value="{{ config.value }}"
    {% endif %}
    {% if config.label %}
    placeholder="{{ config.label }}"
    {% endif %}
    {% if config.autofocus %}
    autofocus="" 
    {% endif %}
    {% if config.disabled %}
    disabled="" 
    {% endif %}
    {% if config.maxlength %}
    maxlength="{{ config.maxlength }}" 
    {% endif %}
    {% if config.autocomplete %}
    autocomplete="{{ config.autocomplete }}" 
    {% endif %}
    {# merge classes #}
    {% set classes = ['form-control']|merge([config.class]) %}
    class="{{ classes|join(' ') }}"
    {# help text #}
    {% if config.help %}
    aria-describedby="{{ '%s-help'|format(config.id ?? config.name ) }}"
    {% endif %}
    {# validation #}
    {% if validation %}
        {% if validation.required %}
        required="" 
        {% endif %}
        {% if validation.pattern %}
        pattern="{{ validation.pattern }}" 
        {% endif %}
        {% if validation.validityStates %}
            {% for validityState, validityStateProperties in validation.validityStates %}
                {% if validityStateProperties.invalid %}
                    {{ 'data-validity-state-%s-invalid="true"'|format(validityState) }}
                {% endif %}
                {% if validityStateProperties.message %}
                    {{ 'data-validity-state-%s-message=%s'|format(validityState, validityStateProperties.message|escape('html_attr')) }}
                {% endif %}
            {% endfor %}
        {% endif %}
    {% endif %}
{% endmacro %}

{# displays a field validation message
@param string type: text | email
@param hash config: hash for field properties (see fieldSetAttributes macro explanation)
#}
{% macro displayFieldValidationMessage(validation) %}
    {% if validation.invalidMessage %}
<div class="invalid-tooltip">
  {{ validation.invalidMessage }}
</div>
    {% endif %}
{% endmacro %}

{# displays label
@param hash config: hash for field properties (see fieldSetAttributes macro explanation)
#}
{% macro displayLabel(config) %}
<label for="{{ config.id ?? config.name }}">{{ config.label }}</label>
{% endmacro %}

{# displays help
@param hash config: hash for field properties (see fieldSetAttributes macro explanation)
#}
{% macro displayHelp(config) %}
    {% set help = config.help ? [config.help] : [] %}
    {% if config.maxlength %}
        {% set help = help|merge(['maximum length %s characters'|format(config.maxlength)]) %}
    {% endif %}
    {% if help is not empty %}
 <small id="{{ '%s-help'|format(config.id ?? config.name ) }}" class="form-text text-muted">{{ help|join('; ') }}</small>
{% endif %}
{% endmacro %}

{############
# INPUT TAG #
############}

{# displays an input field given the type, useful when type is condition dependant
@param string type: text | email
@param hash config: hash for field properties (see fieldSetAttributes macro explanation)
#}
{% macro displayInput(type, config) %}
    {% import _self as selfMacros %}
    {% set config = parseFieldConfig(config) %}
    <input 
    type="{{ type }}"
    {{ selfMacros.fieldSetAttributes(config) }}
    >
    {#{ selfMacros.displayFieldValidationMessage(config.validation) }#}
{% endmacro %}

{# displays an input field given the type, useful when type is condition dependant
@param string type: text | email
@param hash config: hash for field properties (see fieldSetAttributes macro explanation)
#}
{% macro displayInputByTipe(type, config) %}
    {% import _self as selfMacros %}
    {% if type == 'text' %}
        {{ selfMacros.displayInputText(config) }}
    {% elseif type == 'email' %}
        {{ selfMacros.displayInputEmail(config) }}
    {% elseif type == 'password' %}
        {{ selfMacros.displayInputPassword(config) }}
    {% endif %}
{% endmacro %}

{# displays an input hidden field
@param hash config: hash for field properties (see fieldSetAttributes macro explanation)
#}
{% macro displayInputHidden(config) %}
    {% import _self as selfMacros %}
    {{ selfMacros.displayInput('hidden', config) }}
{% endmacro %}

{# displays an input text field
@param hash config: hash for field properties (see fieldSetAttributes macro explanation)
#}
{% macro displayInputText(config) %}
    {% import _self as selfMacros %}
    {{ selfMacros.displayInput('text', config) }}
{% endmacro %}

{# displays an input email field
@param hash config: hash for field properties (see fieldSetAttributes macro explanation)
#}
{% macro displayInputEmail(config) %}
    {% import _self as selfMacros %}
    {{ selfMacros.displayInput('email', config) }}
{% endmacro %}

{# displays an input password field
@param hash config: hash for field properties (see fieldSetAttributes macro explanation)
#}
{% macro displayInputPassword(config) %}
    {% import _self as selfMacros %}
    {{ selfMacros.displayInput('password', config) }}
{% endmacro %}

{# displays a file input field
@param hash config: hash for field properties (see fieldSetAttributes macro explanation)
#}
{% macro displayInputFile(config) %}
    {% import _self as selfMacros %}
    {{ selfMacros.displayInput('file', config) }}
{% endmacro %}

{# displays an input text field
@param hash config: hash for field properties (see fieldSetAttributes macro explanation)
#}
{% macro displayInputTextGroup(config) %}
    {% import _self as selfMacros %}
    <div class="form-group">
        {{ selfMacros.displayLabel(config) }}
        {{ selfMacros.displayInputText(config) }}
        {{ selfMacros.displayHelp(config) }}
    </div>
{% endmacro %}

{###########
# TEXTAREA #
###########}

{# displays a textarea field
@param hash config: hash for field properties (see fieldSetAttributes macro explanation)
#}
{% macro displayTextarea(config) %}
    {% import _self as selfMacros %}
    {% set config = parseFieldConfig(config) %}
    {% set value = config.value %}
    {% set config = deleteProperty(config, 'value') %}
    <textarea
    {{ selfMacros.fieldSetAttributes(config) }}
    >{{ value }}</textarea>
    {{ selfMacros.displayFieldValidationMessage(config.validation) }}
{% endmacro %}

{# rich text field
language packages must be downloaded from https://www.tiny.cloud/get-tiny/language-packages/ and saved into /public/share/rich-text-editor/locales/
@param hash context: the calling template context object
@param hash config: hash for field properties (see fieldSetAttributes macro explanation) excpet for specific rich text options which can be set as a config.options hash
#}
{% macro displayRichTextEditor(context, config) %}
    {% import _self as selfMacros %}
    {# check locale file path #}
    {% set languageCode = attribute(context.language, 'ISO-639-1') %}
    {% set localePath = '/public/share/rich-text-editor/locales/%s.js'|format(languageCode) %}
    {% if isFile(localePath) == false %}
        {% set config = updateProperty(config, 'validation', updateProperty(config.validation, 'invalidMessage', 'TinyMCE local file missing in %s'|format(localePath))) %}
        {% set loadLocale = false %}
    {% else %}
        {% set loadLocale = true %}
    {% endif %}
    {# format id to be used by javascript #}
    {% set config = updateProperty(config, 'id', (config.id ?? config.name)|formatIdforJs) %}
    <div class="form-group">
        {{ selfMacros.displayLabel(config) }}
        {{ selfMacros.displayTextarea(config) }}
        {{ selfMacros.displayHelp(config) }}
    </div>
    <script type="text/javascript">
        var options = {
            selector: '#{{ config.id }}',
    {% if loadLocale %}
            language: '{{ languageCode }}',
            language_url: '{{ localePath }}',
    {% endif %}
    {# rich text editor specific options #}
    {% for option,value in config.options %}
        '{{ option }}': {{ value|varToJs }},
    {% endfor %}
        }
        tinymce.init(options);
    </script>
{% endmacro %}

{# file(s) upload field
@param hash context: the calling template context object
@param hash config: hash for field properties (see fieldSetAttributes macro explanation) excpet for specific upload file options which can be set as a config.options hash; common options:
    allowedFileTypes: ['image', 'html', 'text', 'video', 'audio', 'flash', 'object']
#}
{% macro displayFileUpload(context, config) %}
    {% import _self as selfMacros %}
    {# build uplaod route #}
    {% set uploadRoute = buildRouteToActionFromRoot('upload') %}
    <div class="form-group">
        {{ selfMacros.displayLabel(config) }}
        {{ selfMacros.displayInputHidden(config) }}
        {# format upload input id to be used by javascript #}
        {% set uploadId = '%s-upload'|format(config.id ?? config.name)|formatIdforJs %}
        {% set config = updateProperty(config, 'name', uploadId) %}
        {% set config = updateProperty(config, 'id', uploadId) %}
        {{ selfMacros.displayInputFile(config) }}
        {{ selfMacros.displayHelp(config) }}
    </div>
    
    <script type="text/javascript">
    $("#{{ config.id }}").fileinput({
        language: '{{ attribute(context.language, 'ISO-639-1') }}',
        theme: 'simplex',
        uploadUrl: '{{ uploadRoute }}',
    {% for option,value in config.options %}
        '{{ option }}': {{ value|varToJs }},
    {% endfor %}
    }).on('fileuploaded', function(event, data, previewId, index) {
        console.log(data);
        console.log(previewId);
        console.log(index);
    });
    </script>
{% endmacro %}
